---
config:
  class:
    hideEmptyMembersBox: true
  layout: elk
---
classDiagram
    class main {
        main()
    }
    main ..> asyncio
    main ..> FiniteStateMachine
    main ..> shutdown
    main ..> logger
    main ..> environment

    class logger {
        get_logger(name: str, fmt: str) -> Logger
    }
    logger ..> logging

    class environment {
        get_self_id() -> str
    }
    environment ..> os

    %% heartbeat.py
    class HeartbeatService {
        \_\_init\_\_(comm, peers, shutdown_cb, interval, timeout, quiet)
        run()
    }
    HeartbeatService ..> asyncio
    HeartbeatService ..> datetime
    HeartbeatService ..> AsyncCommunicator
    HeartbeatService ..> MessageType
    HeartbeatService ..> Peer
    HeartbeatService ..> logger

    %% fsm

    %%% finite_state_machine.py
    class FiniteStateMachine {
        context: Context
        \_\_init\_\_(quiet: bool, handler_quiet: bool)
        run()
    }
    FiniteStateMachine ..> asyncio
    FiniteStateMachine ..> State
    FiniteStateMachine ..> Context
    FiniteStateMachine ..> setup
    FiniteStateMachine ..> training
    FiniteStateMachine ..> secure_average_computation
    FiniteStateMachine ..> termination
    FiniteStateMachine ..> saving
    FiniteStateMachine ..> shutdown
    FiniteStateMachine ..> connecting
    FiniteStateMachine ..> MessageType
    FiniteStateMachine ..> logger

    %%% state.py
    class State {
        CONNECTING
        SETUP
        TRAINING
        SECURE_AVERAGE_COMPUTATION
        SAVING_MODEL
        TERMINATION_CHECK
        SHUTDOWN
    }
    <<enum>> State
    State <|-- Enum

    %%% context.py
    class Context {
        \_\_init\_\_(quiet: bool)
        owner: Peer
        peers: list[Peer]
        state: State
        active: bool
        premature_stop: bool
        comm: AsyncCommunicator
        heartbeat_service: HeartbeatService
        heartbeat_task: Task | None
        log: Logger
        sync_peers: set[Peer]
        model: Model
        dataset: Dataset | None
        training_history: History | None
        received: ReceivedWeights
        termination_votes: list[TerminationVote]
        rounds_done: int
    }
    Context ..> asyncio
    Context ..> State
    Context ..> TerminationVote
    Context ..> Model
    Context ..> Dataset
    Context ..> History
    Context ..> Weights
    Context ..> AsyncCommunicator
    Context ..> logger
    Context ..> Peer
    Context ..> peers
    Context ..> HeartbeatService

    class ReceivedWeights {
        partitions: list[Weights]
        subtotals: list[Weights]
        \_\_init\_\_()
        reset()
    }
    ReceivedWeights ..> Weights

    %%% handler/

    %%%% connecting.py
    class connecting {
        get_connecting_handler(context: Context) -> Callable[[], Awaitable[State]]
    }
    connecting ..> asyncio
    connecting ..> Peer
    connecting ..> State
    connecting ..> Context

    %%%% saving.py
    class saving {
        get_saving_handler(context: Context) -> Callable[[], Awaitable[State]]
    }
    saving ..> State
    saving ..> Context

    %%%% secure_average_computation.py
    class secure_average_computation {
        get_sac_handler(context: Context) -> Callable[[], Awaitable[State]]
    }
    secure_average_computation ..> datetime
    secure_average_computation ..> MessageType
    secure_average_computation ..> Encodable
    secure_average_computation ..> AsyncCommunicator
    secure_average_computation ..> State
    secure_average_computation ..> Context
    secure_average_computation ..> waiting
    secure_average_computation ..> sac
    secure_average_computation ..> Peer
    secure_average_computation ..> Weights
    secure_average_computation ..> weights

    %%%% setup.py
    class setup {
        get_setup_handler(context: Context) -> Callable[[], Awaitable[State]]
    }
    setup ..> asyncio
    setup ..> datetime
    setup ..> State
    setup ..> Context
    setup ..> MessageType
    setup ..> Encodable
    setup ..> Weights
    setup ..> dataset

    %%%% shutdown.py
    class shutdown {
        get_shutdown_handler(context: Context) -> Callable[[], Awaitable[State]]
        get_stop(context: Context) -> Callable[[], Awaitable[None]]
    }
    shutdown ..> asyncio
    shutdown ..> State
    shutdown ..> Context

    %%%% termination.py
    class TerminationVote {
        IN_FAVOR
        AGAINST
    }
    <<enum>> TerminationVote
    TerminationVote <|-- Enum

    class termination {
        get_termination_handler(context: Context) -> Callable[[], Awaitable[State]]
    }
    termination ..> datetime
    termination ..> Context
    termination ..> State
    termination ..> waiting
    termination ..> MessageType
    termination ..> Peer

    %%%% training.py
    class training {
        get_training_handler(context: Context) -> Callable[[], Awaitable[State]]
    }
    training ..> datetime
    training ..> State
    training ..> Context
    training ..> waiting
    training ..> MessageType
    training ..> Peer

    %%%% waiting.py
    class waiting {
        wait_for_sync(collection: Sized, filled_len: int, log: Logger, name: str)
    }
    waiting ..> asyncio
    waiting ..> logging

    %% communication/

    %%% message.py
    class MessageType {
        HANDSHAKE
        HANDSHAKE_ACK
        HEARTBEAT
        SYNC
        INITIAL_WEIGHTS
        PARTITIONED_WEIGHTS
        SUBTOTAL_WEIGHTS
        TERMINATION
    }
    <<enum>> MessageType
    MessageType <|-- Enum

    class Message {
        message_type: MessageType
        sender: Peer
        receiver: Peer
        content: str | Encodable
        timestamp: datetime
        \_\_init\_\_(message_type, sender, receiver, content, timestamp)
        to_dict(obj: Message) -> dict
        from_dict(data: dict) -> Message
        encode(obj: Message) -> bytes
        decode(data: bytes) -> Peer
    }
    Message <|-- Encodable
    Message ..> datetime
    Message ..> json
    Message ..> Peer
    Message ..> MessageType
    Message ..> Weights
    Message ..> logger

    %%% communicator.py
    class AsyncCommunicator {
        \_\_init\_\_(peer: Peer, quiet: bool = False)
        start_server()
        stop_server()
        shutdown()
        connect_to_peer(peer: Peer)
        send_message(receiver, message_type, content)
        register_message_handler(message_type, handler)
        broadcast_message(message_type, content)
    }
    AsyncCommunicator ..> asyncio
    AsyncCommunicator ..> datetime
    AsyncCommunicator ..> logger
    AsyncCommunicator ..> Peer
    AsyncCommunicator ..> Message
    AsyncCommunicator ..> MessageType
    AsyncCommunicator ..> Encodable

    %%% encodable.py
    class Encodable {
        to_dict(obj: Encodable) -> dict
        from_dict(data: dict) -> Encodable
        encode(obj: Encodable) -> bytes
        decode(data: bytes) -> Encodable
    }
    <<abstract>> Encodable
    Encodable <|-- ABC

    %% peers.py
    class peers {
        get_peer_number() -> int
        load_self(peers_file: str) -> Peer
        load_peers(peers_file: str) -> dict[str, Peer]
        load_all_peers() -> dict[str, Peer]
    }
    peers ..> Peer
    peers ..> environment
    peers ..> os
    peers ..> json

    class Peer {
        \_\_init\_\_(node_id: str, host: str, port: int)
        to_dict(obj: Peer) -> dict
        from_dict(data: dict) -> Peer
        encode(obj: Peer) -> bytes
        decode(data: bytes) -> Peer
    }
    Peer <|-- Encodable
    Peer ..> json

    %% builtins
    class os:::builtin
    <<builtin>> os
    class asyncio:::builtin
    <<builtin>> asyncio
    class logging:::builtin
    <<builtin>> logging
    class json:::builtin
    <<builtin>> json
    class ABC:::builtin
    <<builtin>> ABC
    class datetime:::builtin
    <<builtin>> datetime
    class Enum:::builtin
    <<builtin>> Enum
    class random:::builtin
    <<builtin>> random

    %% external dependencies

    %% example
    %% class docopt:::extern
    %% <<extern>> docopt

    %% legend

    class Builtin:::builtin
    %% class Extern:::extern
    %% class peers:::peers
    %% class Output:::serviceOutput
    %% class Check:::serviceCheck
    %% class Error:::error
    %% class LLM:::llm
    %% class Utils:::utils
    %% class FileSystem:::file_system

    %% style

    classDef builtin fill:#BBDEFB,stroke:#1565C0,stroke-width:1px
    %% classDef extern fill:#C8E6C9,stroke:#2E7D32,stroke-width:1px
    %% classDef peers fill:#FFE0B2,stroke:#EF6C00,stroke-width:1px
    %% classDef serviceOutput fill:#FFECB3,stroke:#FF9800,stroke-width:1px
    %% classDef serviceCheck fill:#FFF3E0,stroke:#FFB74D,stroke-width:1px
    %% classDef error fill:#FFCDD2,stroke:#C62828,stroke-width:1px
    %% classDef llm fill:#E1BEE7,stroke:#6A1B9A,stroke-width:1px
    %% classDef utils fill:#E0E0E0,stroke:#424242,stroke-width:1px
    %% classDef file_system fill:#B2DFDB,stroke:#00796B,stroke-width:1px

